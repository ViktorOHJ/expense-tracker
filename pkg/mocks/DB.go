// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ViktorOHJ/expense-tracker/pkg"

	time "time"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddCategory provides a mock function with given fields: _a0, _a1
func (_m *DB) AddCategory(_a0 context.Context, _a1 *models.Category) (models.Category, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddCategory")
	}

	var r0 models.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) (models.Category, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Category) models.Category); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Category) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTransaction provides a mock function with given fields: _a0, _a1
func (_m *DB) AddTransaction(_a0 context.Context, _a1 *models.Transaction) (models.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddTransaction")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) (models.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) models.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Transaction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCategory provides a mock function with given fields: _a0, _a1
func (_m *DB) CheckCategory(_a0 context.Context, _a1 int) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckCategory")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransaction provides a mock function with given fields: _a0, _a1
func (_m *DB) DeleteTransaction(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSummary provides a mock function with given fields: parentCtx, from, to
func (_m *DB) GetSummary(parentCtx context.Context, from time.Time, to time.Time) (models.Summary, error) {
	ret := _m.Called(parentCtx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 models.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) (models.Summary, error)); ok {
		return rf(parentCtx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) models.Summary); ok {
		r0 = rf(parentCtx, from, to)
	} else {
		r0 = ret.Get(0).(models.Summary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(parentCtx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: _a0, _a1
func (_m *DB) GetTransactionByID(_a0 context.Context, _a1 int) (models.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (models.Transaction, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: parentCtx, txType, category_id, from, to, limit, offset
func (_m *DB) GetTransactions(parentCtx context.Context, txType *bool, category_id *int, from *time.Time, to *time.Time, limit int, offset int) ([]*models.Transaction, error) {
	ret := _m.Called(parentCtx, txType, category_id, from, to, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bool, *int, *time.Time, *time.Time, int, int) ([]*models.Transaction, error)); ok {
		return rf(parentCtx, txType, category_id, from, to, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bool, *int, *time.Time, *time.Time, int, int) []*models.Transaction); ok {
		r0 = rf(parentCtx, txType, category_id, from, to, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bool, *int, *time.Time, *time.Time, int, int) error); ok {
		r1 = rf(parentCtx, txType, category_id, from, to, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
